#!/usr/bin/env perl
use strict;
use warnings;

# Roman numeral analysis

use GraphViz2;
use Music::BachChoralHarmony;
use Music::ToRoman;

my $in_key = shift || 'G_M';

my $bach = Music::BachChoralHarmony->new;
my $songs = $bach->parse();
# Show all keys:
#use Data::Dumper;warn(Dumper[map{"$_: $songs->{$_}{key}"}sort keys%$songs]);exit;

my %score;

# Process each song for key and chord
for my $song ( sort keys %$songs ) {
    my $key = $songs->{$song}{key};

    # Skip unless we are in the right key
    next unless $key eq $in_key;

    # Get the scale name
    my $name = $key =~ /M/ ? 'major' : 'minor';
    $key =~ s/_?M//i;

    my $mtr = Music::ToRoman->new(
        scale_note => $key,
        scale_name => $name,
    );
#    print "SONG: $song in $key $name\n";

    # The last seen roman
    my $last;

    # Turn the chord into a roman representation
    for my $event ( @{ $songs->{$song}{events} } ) {
        my $chord = $event->{chord};

        $chord =~ s/_//;
        $chord =~ s/d/o/;

        my $roman = $mtr->parse($chord);
#        print "CHORD: $chord, ROMAN: $roman\n";

        # Tally the bigram
        $score{ $last . ' ' . $roman }++ if $last;
        $last = $roman;
    }
}

my $g = GraphViz2->new(
    global => { directed => 1 },
    node   => { shape => 'oval' },
    edge   => { color => 'grey' },
);

my %nodes;
my %edges;

for my $bigram ( keys %score ) {
    my ( $i, $j ) = split ' ', $bigram;

    $g->add_node( name => $i )
        unless $nodes{$i}++;

    $g->add_node( name => $j )
        unless $nodes{$j}++;

    $g->add_edge( from => $i, to => $j, label => $score{$bigram} )
        unless $edges{$bigram}++;
}

$g->run( format => 'png', output_file => $0 . '.png' );
